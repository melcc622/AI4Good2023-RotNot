{"cells":[{"cell_type":"markdown","metadata":{"id":"r2UlV8aAgKna"},"source":["## Dataset:\n","\n","Source:\n","1. [VegNet](https://data.mendeley.com/datasets/6nxnjbn9w6): “Neat and clean dataset is the elementary requirement to build accurate and robust machine learning models for the real-time environment. With this objective we have created an image dataset of Indian four vegetable with quality parameter which are highly consumed or exported. Accordingly, we have considered four vegetables namely Bell Pepper, Tomato, Chili Pepper, and New Mexico Chile to create a dataset. The dataset is categorized into 4 subfolders of vegetables namely Bell Pepper, Tomato, Chili Pepper, and New Mexico Chile. Further each vegetable folder contains five subfolders namely Unripe, Ripe, Old, Dried and Damaged. Total 6850 images are available in the dataset. We strongly believe that the proposed dataset is very helpful for training, testing and validation of vegetable classification or reorganization machine learning model.“\n","2. [Kaggle Fruits and Vegetables Dataset](https://www.kaggle.com/datasets/muhriddinmuxiddinov/fruits-and-vegetables-dataset?resource=download): \"This dataset contains images of the following fruits and vegetables items:\n","Fresh fruits- fresh banana, fresh apple, fresh orange, fresh mango and fresh strawberry.\n","Rotten fruits- rotten banana, rotten apple, rotten orange, rotten mango and rotten strawberry.\n","Fresh vegetables- fresh potato, fresh cucumber, fresh carrot, fresh tomato and fresh bell pepper.\n","Rotten vegetables- rotten potato, rotten cucumber, rotten carrot, rotten tomato and rotten bell pepper.\"\n"]},{"cell_type":"markdown","metadata":{"id":"JpKq7i0-gecE"},"source":["# Loading Data\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":50376,"status":"ok","timestamp":1686602991931,"user":{"displayName":"Chin Chen Lo","userId":"12429116462945863641"},"user_tz":420},"id":"_XYOqkDyDLUP","outputId":"1bca5814-c3e9-4be7-8f4a-db87cc2b4602"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"bo2yMlCRzm4S","executionInfo":{"status":"ok","timestamp":1686602937102,"user_tz":420,"elapsed":8,"user":{"displayName":"Chin Chen Lo","userId":"12429116462945863641"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from PIL import Image\n","from pprint import pprint\n","import os\n","import shutil \n","\n","import torch \n","import torchvision\n","import torch.nn as nn\n","from torchvision.datasets import ImageFolder\n","from torch.utils.data import DataLoader, Dataset\n","from torchvision.transforms import ToTensor\n","from torchvision.io import read_image\n","from torchvision.utils import make_grid\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","dataset_path = \"/content/drive/Shareddrives/RotNotCrew/testDataset\""]},{"cell_type":"code","source":[],"metadata":{"id":"e6CwrHGcXiyL"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hEhXruA0w59o"},"outputs":[],"source":["def get_data(food_name):\n","  \"\"\"\n","  @param:\n","  food_name: Name of the vegetable or fruit as a string type with capital letter\n","  separated by underscores. Ex: Chile_Pepper\" \n","\n","  @desc:\n","  Based on the input `food_name`, traverse through the google drive folders and\n","  append its rotten and ripe photos to our dimensions table\n","  \"\"\"\n","  dimensions_table = []\n","  \n","  rotten_path = \"{0}/{1}/Rotten\".format(dataset_path,food_name)\n","  ripe_path = \"{0}/{1}/Ripe\".format(dataset_path,food_name)\n","  \n","  new_rotten_path = \"{0}/{1}/final_rotten\".format(dataset_path,food_name)\n","  new_ripe_path = \"{0}/{1}/final_ripe\".format(dataset_path,food_name)\n","  \n","  \n","  rotten_dir = os.fsencode(rotten_path)\n","  ripe_dir = os.fsencode(ripe_path)\n","\n","  # change to nested functions below\n","  # use dictionaries instead?\n","\n","  RorR = \"Rotten\"   #change this to change from rotten or ripe\n","\n","  if RorR.upper() == \"ROTTEN\":\n","    dir = rotten_dir\n","    path = rotten_path\n","    new_path = new_rotten_path\n","  else:\n","    dir = ripe_dir\n","    path = ripe_path\n","    new_path = new_ripe_path\n","\n","  # get rotten or ripe images from the directories\n","  for filepath in os.listdir(dir):\n","    filename = os.fsdecode(filepath)\n","    img = Image.open(path + \"/\" + filename).convert('RGB')\n","\n","    # get width and height\n","    width,height = img.size\n","    img_resize = img.resize((256, 256),Image.LANCZOS)\n","    print(new_path+\"/\" + filename)\n","    img_resize.save(new_path+\"/\" + filename)\n","  \n","    temp_list =[food_name, RorR, filename, height, width]\n","\n","  dimensions_table.append(temp_list)\n","\n","  return dimensions_table\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1685981123489,"user":{"displayName":"Chin Chen Lo","userId":"12429116462945863641"},"user_tz":420},"id":"CtcjqDrG4w85","outputId":"4fcc10be-6e58-492e-bf79-cbc00860f908"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"\\nfood_names = ['Apple','Orange','Strawberry','Mango','Potato','Chile_Pepper',\\n              'New_Mexico_Green_Chile','Banana','Carrot','Tomato','Cucumber',\\n              'BellPepper']\\n\""]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["'''\n","food_names = ['Apple','Orange','Strawberry','Mango','Potato','Chile_Pepper',\n","              'New_Mexico_Green_Chile','Banana','Carrot','Tomato','Cucumber',\n","              'BellPepper']\n","'''\n","# food_names = ['Banana']\n","\n","# dimensions_table = []\n","# for food in food_names:\n","#   dimensions_table += get_data(food)\n","# print(dimensions_table)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"u3bDVl3OyN_W"},"source":["# Convert image to array"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Izw1pPZFwdzM"},"outputs":[],"source":["# scikit-image (skimage)\n","from skimage import io\n","\n","def to_array(food_name):\n","  \"\"\"\n","  @param:\n","  food_name: Name of the vegetable or fruit as a string type with capital letter\n","  separated by underscores. Ex: Chile_Pepper\n","\n","  @desc:\n","  Based on the input `food_name`, traverse through the google drive folders and\n","  convert the image to numpy arrays\n","  \"\"\"\n","  dataset_path = \"/content/drive/Shareddrives/RotNotCrew/dataset\"\n","  rotten_path = \"{0}/{1}/Rotten\".format(dataset_path,food_name)\n","  ripe_path = \"{0}/{1}/Ripe\".format(dataset_path,food_name)\n","  \n","  new_rotten_path = \"{0}/{1}/new_rotten\".format(dataset_path,food_name)\n","  new_ripe_path = \"{0}/{1}/new_ripe\".format(dataset_path,food_name)\n","  \n","  rotten_dir = os.fsencode(rotten_path)\n","  print(rotten_dir)\n","\n","  ripe_dir = os.fsencode(ripe_path)\n","  print(ripe_dir)\n","\n","  # get \"damaged\" images from the directories and append numpy arrays\n","  # to rotten_images list\n","  rotten_images = []\n","  for filepath in os.listdir(rotten_dir):\n","    filename = os.fsdecode(filepath)\n","    rotten_images.append(io.imread(rotten_path+ \"/\" + filename))\n","\n","  # get \"ripe\" images from the directories and append numpy arrays\n","  # to ripe_images list\n","  ripe_images = []\n","  for filepath2 in os.listdir(ripe_dir):\n","    filename2 = os.fsdecode(filepath2)\n","    ripe_images.append(io.imread(ripe_path + \"/\" + filename2))\n","\n","  return rotten_images, ripe_images\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"executionInfo":{"elapsed":1514,"status":"error","timestamp":1685981125204,"user":{"displayName":"Chin Chen Lo","userId":"12429116462945863641"},"user_tz":420},"id":"4xz2xeXKh1wN","outputId":"812df82c-f146-4304-f710-605f65d2fb9e"},"outputs":[{"ename":"FileNotFoundError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-860197842dc9>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mskimage\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/Shareddrives/RotNotCrew/dataset/Cucumber/Ripe/freshCucumber (1).jpeg\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mimg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# loads it into a numpy array!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'gray'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/skimage/io/_io.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(fname, as_gray, plugin, **plugin_args)\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mfile_or_url_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_plugin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'imread'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplugin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplugin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mplugin_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ndim'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/skimage/io/manage_plugins.py\u001b[0m in \u001b[0;36mcall_plugin\u001b[0;34m(kind, *args, **kwargs)\u001b[0m\n\u001b[1;32m    205\u001b[0m                                (plugin, kind))\n\u001b[1;32m    206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 207\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/skimage/io/_plugins/imageio_plugin.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimageio_imread\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimageio_imread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imageio/v2.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(uri, format, **kwargs)\u001b[0m\n\u001b[1;32m    224\u001b[0m     \u001b[0mimopen_args\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"legacy_mode\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 226\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mimopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ri\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mimopen_args\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    227\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imageio/core/imopen.py\u001b[0m in \u001b[0;36mimopen\u001b[0;34m(uri, io_mode, plugin, extension, format_hint, legacy_mode, **kwargs)\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_hint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat_hint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m         \u001b[0mrequest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mio_mode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat_hint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mformat_hint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextension\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mextension\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0msource\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"<bytes>\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imageio/core/request.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, uri, mode, extension, format_hint, **kwargs)\u001b[0m\n\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0;31m# Parse what was given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 247\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parse_uri\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;31m# Set extension\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imageio/core/request.py\u001b[0m in \u001b[0;36m_parse_uri\u001b[0;34m(self, uri)\u001b[0m\n\u001b[1;32m    405\u001b[0m                 \u001b[0;31m# Reading: check that the file exists (but is allowed a dir)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 407\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No such file: '%s'\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    408\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m                 \u001b[0;31m# Writing: check that the directory to write to does exist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: No such file: '/content/drive/Shareddrives/RotNotCrew/dataset/Cucumber/Ripe/freshCucumber (1).jpeg'"]}],"source":["# Just for reference\n","from skimage import io\n","filename = \"/content/drive/Shareddrives/RotNotCrew/dataset/Cucumber/Ripe/freshCucumber (1).jpeg\"\n","img=io.imread(filename) # loads it into a numpy array!\n","import matplotlib.pyplot as plt  \n","plt.imshow(img,cmap='gray')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qb2P7UKFRPL0"},"outputs":[],"source":["def viewimage(food_name):\n","  \"\"\"\n","  @param:\n","  food_name: Name of the vegetable or fruit as a string type with capital letter\n","  separated by underscores. Ex: Chile_Pepper\n","\n","  @desc\n","  Based on the input `food_name`, traverse through the google drive folders and\n","  displays the first rotten and fresh image in the folder for reference\n","\n","  \"\"\"\n","  filepath = \"/content/drive/Shareddrives/RotNotCrew/dataset/{food_name}/\".format(food_name=food_name)\n","  ripe_first = filepath + \"Ripe/fresh\" + \"{food_name}\" + \" (1).jpeg\".format(food_name=food_name)\n","  print(ripe_first)\n","\n","  damaged_first = filepath + \"Damaged/fresh\" + \"{food_name}\" + \" (1).jpeg\".format(food_name=food_name)\n","\n","  img_ripe=io.imread(ripe_first) \n","  img_damaged=io.imread(damaged_first)\n","  plt.imshow(img_ripe,cmap='gray')\n","  plt.imshow(img_damaged)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OHtAek4URwze"},"outputs":[],"source":["# viewimage(\"Cucumber\")\n","\n","# /content/drive/Shareddrives/RotNotCrew/dataset/Cucumber/Ripe/freshCucumber (1).jpeg"]},{"cell_type":"markdown","metadata":{"id":"SmcNiLPsrYb0"},"source":["# Exploratory Data Analysis"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"xAOy6i5J307I"},"outputs":[],"source":["import os\n","food_names = ['Apple','Orange','Strawberry','Mango','Potato','Chile_Pepper',\n","              'New_Mexico_Green_Chile','Banana','Carrot','Tomato','Cucumber',\n","              'BellPepper']\n","for food_name in food_names:\n","  print({len(os.listdir(os.path.join(dataset_path, food_name,\"final_rotten\")))})"]},{"cell_type":"markdown","metadata":{"id":"uY19ZbDscQA7"},"source":["# Data Loading\n","Only Apples"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMy5ZHKejwj3"},"outputs":[],"source":["data_dir = \"/content/drive/Shareddrives/RotNotCrew/dataset/Apple\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TcyBMq09kTyP"},"outputs":[],"source":["dataset = ImageFolder(data_dir, transform=ToTensor())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AZne6alZGyQL"},"outputs":[],"source":["splits = [800, 100, 300]\n","train_data, validate_data, test_data = torch.utils.data.random_split(dataset, splits, generator=torch.Generator().manual_seed(0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDrhmBKdkc4D"},"outputs":[],"source":["batch_size = 32\n","train_data = DataLoader(train_data, batch_size, shuffle=True)\n","validate_data = DataLoader(validate_data, batch_size, shuffle=True)\n","test_data = DataLoader(test_data, batch_size, shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nz_DliHClXbQ"},"outputs":[],"source":["def test_batch(data_loader):\n","  for images, labels in data_loader:\n","    fig, ax = plt.subplots(figsize=(12,12))\n","    ax.set_xticks([]); ax.set_yticks([])\n","    ax.imshow(make_grid(images, nrow=9).permute(1,2,0))\n","    print(labels)\n","    break"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_zTUR517dbWh"},"outputs":[],"source":["test_batch(train_data)"]},{"cell_type":"markdown","metadata":{"id":"N_G3Fzi0s47k"},"source":["# ResNet"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QlkgtykShcHw"},"outputs":[],"source":["class block(nn.Module):\n","    def __init__(\n","        self, in_channels, intermediate_channels, identity_downsample=None, stride=1\n","    ):\n","        super().__init__()\n","        self.expansion = 4\n","        self.conv1 = nn.Conv2d(\n","            in_channels,\n","            intermediate_channels,\n","            kernel_size=1,\n","            stride=1,\n","            padding=0,\n","            bias=False,\n","        )\n","        self.bn1 = nn.BatchNorm2d(intermediate_channels)\n","        self.conv2 = nn.Conv2d(\n","            intermediate_channels,\n","            intermediate_channels,\n","            kernel_size=3,\n","            stride=stride,\n","            padding=1,\n","            bias=False,\n","        )\n","        self.bn2 = nn.BatchNorm2d(intermediate_channels)\n","        self.conv3 = nn.Conv2d(\n","            intermediate_channels,\n","            intermediate_channels * self.expansion,\n","            kernel_size=1,\n","            stride=1,\n","            padding=0,\n","            bias=False,\n","        )\n","        self.bn3 = nn.BatchNorm2d(intermediate_channels * self.expansion)\n","        self.relu = nn.ReLU()\n","        self.identity_downsample = identity_downsample\n","        self.stride = stride\n","\n","    def forward(self, x):\n","        identity = x.clone()\n","\n","        x = self.conv1(x)\n","        x = self.bn1(x)\n","        x = self.relu(x)\n","        x = self.conv2(x)\n","        x = self.bn2(x)\n","        x = self.relu(x)\n","        x = self.conv3(x)\n","        x = self.bn3(x)\n","\n","        if self.identity_downsample is not None:\n","            identity = self.identity_downsample(identity)\n","\n","        x += identity\n","        x = self.relu(x)\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QnRnCQQqs_ge"},"outputs":[],"source":["class ResNet(nn.Module):\n","    def __init__(self, block, layers, image_channels, num_classes):\n","        super(ResNet, self).__init__()\n","        self.in_channels = 64\n","        self.conv1 = nn.Conv2d(\n","            image_channels, 64, kernel_size=7, stride=2, padding=3, bias=False\n","        )\n","        self.bn1 = nn.BatchNorm2d(64)\n","        self.relu = nn.ReLU()\n","        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n","\n","        # Essentially the entire ResNet architecture are in these 4 lines below\n","        self.layer1 = self._make_layer(\n","            block, layers[0], intermediate_channels=64, stride=1\n","        )\n","        self.layer2 = self._make_layer(\n","            block, layers[1], intermediate_channels=128, stride=2\n","        )\n","        self.layer3 = self._make_layer(\n","            block, layers[2], intermediate_channels=256, stride=2\n","        )\n","        self.layer4 = self._make_layer(\n","            block, layers[3], intermediate_channels=512, stride=2\n","        )\n","\n","        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n","        self.fc = nn.Linear(512 * 4, num_classes)\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.bn1(x)\n","        x = self.relu(x)\n","        x = self.maxpool(x)\n","        x = self.layer1(x)\n","        x = self.layer2(x)\n","        x = self.layer3(x)\n","        x = self.layer4(x)\n","\n","        x = self.avgpool(x)\n","        x = x.reshape(x.shape[0], -1)\n","        x = self.fc(x)\n","\n","        return x\n","\n","    def _make_layer(self, block, num_residual_blocks, intermediate_channels, stride):\n","        identity_downsample = None\n","        layers = []\n","\n","        # Either if we half the input space for ex, 56x56 -> 28x28 (stride=2), or channels changes\n","        # we need to adapt the Identity (skip connection) so it will be able to be added\n","        # to the layer that's ahead\n","        if stride != 1 or self.in_channels != intermediate_channels * 4:\n","            identity_downsample = nn.Sequential(\n","                nn.Conv2d(\n","                    self.in_channels,\n","                    intermediate_channels * 4,\n","                    kernel_size=1,\n","                    stride=stride,\n","                    bias=False,\n","                ),\n","                nn.BatchNorm2d(intermediate_channels * 4),\n","            )\n","\n","        layers.append(\n","            block(self.in_channels, intermediate_channels, identity_downsample, stride)\n","        )\n","\n","        # The expansion size is always 4 for ResNet 50,101,152\n","        self.in_channels = intermediate_channels * 4\n","\n","        # For example for first resnet layer: 256 will be mapped to 64 as intermediate layer,\n","        # then finally back to 256. Hence no identity downsample is needed, since stride = 1,\n","        # and also same amount of channels.\n","        for i in range(num_residual_blocks - 1):\n","            layers.append(block(self.in_channels, intermediate_channels))\n","\n","        return nn.Sequential(*layers)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZyNRg8D0t5zB"},"outputs":[],"source":["def ResNet50(img_channel=3, num_classes=1000):\n","    return ResNet(block, [3, 4, 6, 3], img_channel, num_classes)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l9nQ0LRotTMC"},"outputs":[],"source":["def test():\n","    BATCH_SIZE = 4\n","    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    net = ResNet50(img_channel=3, num_classes=2).to(device)\n","    print(net)\n","    for images, labels in train_data:\n","        out = net(images)\n","        print(out)\n","        break"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IDaxMqtDtyB8"},"outputs":[],"source":["test()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oTzzuOlreBEV"},"outputs":[],"source":[]}],"metadata":{"colab":{"collapsed_sections":["u3bDVl3OyN_W","N_G3Fzi0s47k"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}